import comment
import keyword
import variable
import units
import table
import local

Statement: UnitsCtrl | Locals | Table | FuncDef | Block | Primed | IfStatement |
		 WhileStatement | Expression;

Block: '{' stmts*=Statement '}';

IfStatement: 'if' '(' cond=Expression ')'
				true_blk=Block ('else' false_blk=Block)?;
WhileStatement: 'while' '(' cond=Expression ')' Block;

Primed: variable=ID/'+/ '='!'='? expression=LogicalCon;

Expression: Assignment;
Assignment: (variable=VarRef '='!'=')? expression=LogicalCon;
LogicalCon: op=Relational (op=LogCon op=Relational)*;
Relational: op=Addition (op=RelOp op=Addition)*;
Addition: op=Multiplication (op=PlusOrMinus op=Multiplication)* ;
Multiplication: op=Exponentiation (op=MulOrDiv op=Exponentiation)*;
Exponentiation: op=Negation (op=Exp op=Exponentiation)?; //using Exponentiation? here for right assoc
Negation: (sign=PlusOrMinus)?  primary=Primary;
Primary: FuncCall | Paren | Num | VarRef ;


Var: Local | FuncPar | Variable | FuncDef; // FuncDef here because of function return val syntax
VarRef: var=[Var];
Num: num=NUMBER (unit=UnitId)?;
Func: FuncDef | FunctionTable;
Callable: builtin=Builtin  | user=[Func];
FuncCall: func=Callable '(' args*=Expression[',']  ')';
Paren: ('(' ex=Expression ')');

FuncPar: name=ID (unit=UnitId)?;
FuncDef:  (is_function?='FUNCTION' | is_procedure?='PROCEDURE')
			name=ID '(' pars*=FuncPar[','] ')' (unit=UnitId)?  b=Block;

PlusOrMinus: o=/\+|\-/;
MulOrDiv: o=/\*|\//;
Exp: o='^';
RelOp: o=/([<>]=?|[!=]=)/;
LogCon: o=/(&&)|(\|\|)/;

NUMBER: /[-+]?[0-9]*\.?[0-9]*([eE][-+]?[0-9]+)?/;
