import comment
import keyword
import variable
import units
import table

Statement: Block | Primed | Assignment | IfStatement | WhileStatement |
			Locals | Expression | FuncDef | Table | UnitsCtrl;

Block: '{' stmts*=Statement '}';

IfStatement: 'if' '(' cond=Expression ')'
				true_blk=Block ('else' false_blk=Block)?;
WhileStatement: 'while' '(' cond=Expression ')' Block;

Primed: variable=cID/'+/ '='!'='? expression=LogicalCon;

Expression: Assignment;
Assignment: (variable=VarRef '='!'=')? expression=LogicalCon;
LogicalCon: op=Relational (op=LogCon op=Relational)*;
Relational: op=Addition (op=RelOp op=Addition)*;
Addition: op=Multiplication (op=PlusOrMinus op=Multiplication)* ;
Multiplication: op=Exponentiation (op=MulOrDiv op=Exponentiation)*;
Exponentiation: op=Negation (op=Exp op=Exponentiation)?; //using Exponentiation? here for right assoc
Negation: (sign=PlusOrMinus)?  primary=Primary;
Primary: FuncCall | Paren | Num | VarRef ;


Var: Local | FuncPar | Variable | FuncDef; // FuncDef here because of function return val syntax
VarRef: var=[Var|cID];
Num: num=NUMBER (unit=UnitId)?;
Func: builtin=Builtin | user=[FuncDef|cID];
FuncCall: func=Func '(' args*=Expression[',']  ')';
Paren: ('(' ex=Expression ')');

Local: name=cID;
Locals: 'LOCAL' vars*=Local[','];
FuncPar: name=cID (unit=UnitId)?;
FuncDef:  (is_function?='FUNCTION' | is_procedure?='PROCEDURE')
			name=cID '(' pars*=FuncPar[','] ')' (unit=UnitId)?  b=Block;

PlusOrMinus: o=/\+|\-/;
MulOrDiv: o=/\*|\//;
Exp: o='^';
RelOp: o=/([<>]=?|[!=]=)/;
LogCon: o=/(&&)|(\|\|)/;

